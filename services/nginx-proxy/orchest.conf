map $http_upgrade $connection_upgrade {
    default upgrade;
    ''      close;
}

server {
  listen 80;

  listen 443 ssl;

  ssl_certificate     /etc/ssl/certs/server.crt;
  ssl_certificate_key /etc/ssl/certs/server.key;

  # don't limit max_body_size
  client_max_body_size 0;

  resolver 127.0.0.11 valid=30s;

  server_name localhost;

  error_log  /var/log/nginx.error.log debug;
  
  location /login {

    proxy_set_header Host $http_host;

    set $auth_server "auth-server";
    proxy_pass http://$auth_server;
    
  }

  # Conditional SSL redirect
  access_by_lua_block {
    if ngx.var.ssl_protocol == nil and os.getenv("ENABLE_SSL") == "true"
    then
      redirect_url = "https://" .. ngx.var.host .. ngx.var.request_uri;
      ngx.redirect(redirect_url);
    end
  }

  error_page 401 = @error401;

  # If the user is not logged in, redirect them to login URL
  location @error401 {
    return 302 $scheme://$http_host/login;
  }

  location = /auth {

      set $auth_server "auth-server";

      internal;
      proxy_pass              http://$auth_server;
      proxy_pass_request_body off;
      proxy_set_header        Content-Length "";
      proxy_set_header        X-Original-URI $request_uri;
      proxy_set_header        Content-Type "text/html";
  }

  location / {

    auth_request /auth;

    set $orchest_host "orchest-webserver";
    proxy_pass http://$orchest_host;

    # WebSocket support
    proxy_http_version 1.1;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection $connection_upgrade;
    proxy_read_timeout 86400;
    
  }

  # Update server
  location /update-server {

    auth_request /auth;

    proxy_request_buffering off;
    proxy_read_timeout 1d;

    set $update_server "update-server";
    proxy_pass http://$update_server;
    
  }

  # File manager
  location /container-file-manager {

    auth_request /auth;

    proxy_request_buffering off;

    set $file_manager "file-manager";
    proxy_pass http://$file_manager;
    
  }

  location /api-proxy/ {

    auth_request /auth;

    set $orchest_host "orchest-api";
    
    set $suffix '';
    access_by_lua_block {
        ngx.var.suffix = string.gsub(ngx.var.uri, "/api%-proxy/", "")
    }

    proxy_pass http://$orchest_host/$suffix$is_args$args;
  }

  location ~ ^/(pbp-)?service-[0-9a-zA-Z\-]+-[\-0-9a-f]+-[\-0-9a-f]+_[0-9]+ {

    auth_request /auth;
    
    set $dynamic_host '';
    set $dynamic_port '';
    set $dynamic_request_uri '';

    access_by_lua_block {

        local function split(pString, pPattern)
            local Table = {}  -- NOTE: use {n = 0} in Lua-5.0
            local fpat = "(.-)" .. pPattern
            local last_end = 1
            local s, e, cap = pString:find(fpat, 1)
            while s do
                if s ~= 1 or cap ~= "" then
                table.insert(Table,cap)
                end
                last_end = e+1
                s, e, cap = pString:find(fpat, last_end)
            end
            if last_end <= #pString then
                cap = pString:sub(last_end)
                table.insert(Table, cap)
            end
            return Table
        end

        --[[
          URL structure
          /[dynamic-host]_[port][request_uri_remainder]
        --]]

        local splitted_uri = split(ngx.var.uri, "/");
        -- wont add an empty entry if the string starts with separator
        local base_path = splitted_uri[1];

        local host_port = split(base_path, "_");
        -- excludes initial /
        local host = host_port[1]
        if string.sub(host, 1, 4) == "pbp-" then
          -- preserve the base path by proxyng the entire URI
          host = string.sub(host, 5);
          ngx.var.dynamic_request_uri = ngx.var.uri;
        else
          -- do not preserve the base path
          -- + 1 for the starting "/", + 1 for not including the last
          -- char of base_path
          ngx.var.dynamic_request_uri = string.sub(ngx.var.uri, 2 + string.len(base_path));
        end

        ngx.var.dynamic_host = host;
        ngx.var.dynamic_port = host_port[2]:match "%d+";

    }

    proxy_pass http://$dynamic_host:$dynamic_port$dynamic_request_uri$is_args$args;

    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header Host $host;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-NginX-Proxy true;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_buffering off;

    proxy_pass_header Set-Cookie;
    proxy_cookie_domain $host $dynamic_host;

    # WebSocket support
    proxy_http_version 1.1;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection $connection_upgrade;
    proxy_read_timeout 86400;
  }

  location ~ ^/jupyter-server-[\-0-9a-f]+-[\-0-9a-f]+ {

    auth_request /auth;
    
    set $dynamic_host '';

    access_by_lua_block {

        function split(pString, pPattern)
            local Table = {}  -- NOTE: use {n = 0} in Lua-5.0
            local fpat = "(.-)" .. pPattern
            local last_end = 1
            local s, e, cap = pString:find(fpat, 1)
            while s do
                if s ~= 1 or cap ~= "" then
                table.insert(Table,cap)
                end
                last_end = e+1
                s, e, cap = pString:find(fpat, last_end)
            end
            if last_end <= #pString then
                cap = pString:sub(last_end)
                table.insert(Table, cap)
            end
            return Table
        end

        splitted_uri = split(ngx.var.uri, "/")
        ngx.var.dynamic_host = splitted_uri[1]

    }

    proxy_pass http://$dynamic_host:8888$request_uri$is_args$args;

    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header Host $host;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-NginX-Proxy true;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_buffering off;

    proxy_pass_header Set-Cookie;
    proxy_cookie_domain $host $dynamic_host;

    # WebSocket support
    proxy_http_version 1.1;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection $connection_upgrade;
    proxy_read_timeout 86400;

  }
}
